name: Move Issue to In Progress

on:
  issues:
    types: [labeled, assigned]

permissions:
  issues: write
  contents: write

jobs:
  move_issue:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request == null
    steps:
      - name: Check if issue is assigned
        id: check_issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const isAssigned = context.payload.issue.assignee !== null;
            console.log("Is assigned:", isAssigned);
            return { moveIssue: isAssigned };

      - name: Move issue to 'In Progress' if assigned
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { Octokit } = require("@octokit/rest");
            const octokit = new Octokit({
              auth: '${{ secrets.GITHUB_TOKEN }}'
            });

            const projectName = 'demo';  // <-- Replace with your project name
            const repoName = context.repo.repo;
            const owner = context.repo.owner;
            const issueNumber = context.payload.issue.number;
            console.log("Retrieving projects for repository:", owner, "/", repoName);

            try {
              // List projects in the repository using Octokit client
              const { data: projects } = await octokit.projects.listForRepo({
                owner: owner,
                repo: repoName
              });

              const project = projects.find(proj => proj.name === projectName);  // Match project by name
              if (!project) {
                console.log("Project not found.");
                return;
              }

              const projectId = project.id;
              console.log("Project ID:", projectId);
              console.log("Listing columns for project ID:", projectId);

              // List columns of the found project
              const { data: columns } = await octokit.projects.listColumns({
                project_id: projectId
              });

              const backlogsColumn = columns.find(col => col.name === 'Backlogs');
              const inProgressColumn = columns.find(col => col.name === 'In Progress');
              if (!backlogsColumn || !inProgressColumn) {
                console.log("Backlogs or In Progress column not found.");
                return;
              }

              console.log("Backlogs Column ID:", backlogsColumn.id, "In Progress Column ID:", inProgressColumn.id);
              console.log("Searching for issue card in Backlogs column.");

              // Search for the issue card in the 'Backlogs' column
              const { data: cards } = await octokit.projects.listCards({
                column_id: backlogsColumn.id
              });
              const card = cards.find(card => card.content_url.endsWith(issueNumber.toString()));

              if (card) {
                console.log("Card found:", card.id);
                // Move the card to the 'In Progress' column
                await octokit.projects.moveCard({
                  card_id: card.id,
                  column_id: inProgressColumn.id,
                  position: 'top'
                });
                console.log("Card moved to In Progress.");
              } else {
                console.log("Card not found in Backlogs column.");
              }
            } catch (error) {
              console.error("Error:", error);
            }
